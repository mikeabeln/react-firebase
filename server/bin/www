#!/usr/bin/env node

/**
 * Module dependencies.
 */
// const https = require('https')
const fs = require('fs')
const app = require('./../server.js')
// const debug = require('debug')('server:server')
// const express = require('express')
// const http = require('http')
const https = require('https')

const sslKey = fs.readFileSync('./server/.localhost-ssl/key.pem')
const sslCert = fs.readFileSync('./server/.localhost-ssl/cert.pem')

// const httpApp = express()

// https.createServer({
//       key: fs.readFileSync('server.key'),
//       cert: fs.readFileSync('server.crt')
//     }, app).listen(5555);

/**
 * Get port from environment and store in Express.
 */
let port = process.env.APPLICATION_PORT || 3443


// httpApp.set('port', 3000)
// httpApp.get('*', function (req, res) {
//     console.log(req.headers.host + req.url)
//     res.redirect('https://' + req.headers.host + req.url)
// })


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    port = parseInt(val, 10)
    if (isNaN(port)) {
        // named pipe
        return val
    }
    if (port >= 0) {
        // port number
        return port
    }
    return false
}

app.set('port', normalizePort(port))

/**
 * Create HTTP server.
 */
// http.createServer(httpApp).listen(httpApp.get('port'), function () {
//     console.log('Express HTTP server listening on port ' + httpApp.get('port'))
// })


const server = https.createServer({ key: sslKey, cert: sslCert }, app)

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges')
        process.exit(1)
        break
    case 'EADDRINUSE':
        console.error(bind + ' is already in use')
        process.exit(1)
        break
    default:
        throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address()
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    console.log('Express HTTPS Server Listening on ' + bind)
    console.log(process.env.NODE_ENV)
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)
