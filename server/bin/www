#!/usr/bin/env node

const app = require('./../server.js')

// HTTP Config
const http = require('http')
let port = process.env.APPLICATION_PORT || 3000

// // HTTPS Config
// // COMMENT OUT ABOVE + UNCOMMENT BELOW TO SET UP HTTPS
// // DON'T FORGET SERVER STATEMENT + DEV SERVER PROXY > https://0.0.0.0:3443
// const https = require('https')
// const fs = require('fs')
// const sslKey = fs.readFileSync('./server/.localhost-ssl/key.pem')
// const sslCert = fs.readFileSync('./server/.localhost-ssl/cert.pem')
// let port = process.env.APPLICATION_PORT || 3443


// Normalize a port into a number, string, or false.
function normalizePort(val) {
    port = parseInt(val, 10)
    if (isNaN(port)) {
        // named pipe
        return val
    }
    if (port >= 0) {
        // port number
        return port
    }
    return false
}

app.set('port', normalizePort(port))

const server = http.createServer(app)
// const server = https.createServer({ key: sslKey, cert: sslCert }, app)


// Listen for server errors
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }
    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port
    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges')
        process.exit(1)
        break
    case 'EADDRINUSE':
        console.error(bind + ' is already in use')
        process.exit(1)
        break
    default:
        throw error
    }
}
// Event listener for HTTP server "listening" event.
function onListening() {
    const addr = server.address()
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    console.log('Express Server Listening on ' + bind)
    console.log(process.env.NODE_ENV)
}
// Listen on provided port, on all network interfaces.
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)
